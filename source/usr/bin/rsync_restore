#! /bin/bash

# Copyright (C) 2023 Charles Atkinson
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA

# Purpose:
#   Restores to "point in time" from rsync backups made by the Backup Next Generation (bung) suite's rsync_bu script
#   * If command line options do not specify, interacts with the user to get
#       * The rsync_bu configuration file
#       * The YYYY/Mmm/dd@hh:mm subdirectory of the rsync backup directory (Changed and deleted files)
#       * The tree to restore
#       * The directory to restore it to
#   * Does not do any snapshots or mounts

# Usage:
#   See usage.fun or use -h option.

# Programmers' notes: error and trap handling:
#   * All errors are fatal and finalise() is called.
#   * At any time, a trapped event may transfer control to finalise().
#   * To allow finalise() to tidy up before exiting, changes that need to be
#     undone are noted with global variables named <change name>_flag and the
#     data required to undo those changes is kept in global variables.
#   * finalise() uses the same functions to undo the changes as are used when
#     they are undone routinely.
#   * $finalising_flag is used to prevent recursive calls when errors are
#     encountered while finalise() is running,

# Programmers' notes: variable names and values
#   * Directory names: *_dir.  Their values should not have a trailing /
#   * File names: *_fn
#   * Logicals: *_flag containing values $true or $false.
#     The $true and $false values allow "if [[ $debugging_flag ]]"
#   * $buf is a localised scratch buffer

# Programmers' notes: file descriptor usage
#   0 (stdin)- not changed
#   1 (stdout)- not changed except when logging request when redirected to log
#   2 (stderr)- not changed except when logging request when redirected to log
#   3 - used for reading the configuration file
#   9 - used for locking the PID file

# Programmers' notes: bash library
#   * May be changed by setting environment variable BUNG_LIB_DIR
export BUNG_LIB_DIR=${BUNG_LIB_DIR:-/usr/lib/bung}
source "$BUNG_LIB_DIR/version.scrippet" || exit 1

# Programmers' notes: function call tree
#    +
#    |
#    +-- initialise
#    |   |
#    |   +-- usage
#    |   |
#    |   +-- parse_conf
#    |   |   |
#    |   |   +-- parse_conf_rsync
#    |   |
#    |   +-- postprocess_rsync_conf
#    |   |
#    |   +-- err_trap_rsync_conf
#    |   |
#    |   +-- do_pid
#    |
#    +-- restore
#    |
#    +-- finalise
#        |
#        +-- functions as documented in finalise.fun
#
# Utility functions called from various places:
#     ck_additional_time ck_file convert_additional_time_to_seconds do_umounts fct msg parse_conf_subkey_value parse_conf_word

# Function definitions in alphabetical order.  Execution begins after the last function definition.

#-----------------------
# Name: ck_additional_time
# Args: $1: additional time
# Global variables: sets additional_time_emsg
# Purpose: checks the additional time
#--------------------------
function ck_additional_time {
    fct "${FUNCNAME[0]}" 'started'
    local buf days hours seconds my_rc
    local -r additional_time=$1
    local -r additional_time_OK_re='^((([[:digit:]]+d)?([[:digit:]]+h))?[[:digit:]]+m)?[[:digit:]]+s$'

    additional_time_emsg=
    if [[ $additional_time =~ $additional_time_OK_re ]]; then
        buf=$additional_time
        seconds=${buf#*m}
        seconds=${seconds%s}
        buf=${buf%"$seconds"s}
        minutes=${buf#*h}
        minutes=${minutes%m}
        buf=${buf%"$minutes"m}
        hours=${buf#*d}
        hours=${hours%h}
        buf=${buf%"$hours"h}
        days=${buf#*d}
        days=${days%d}
        ((${seconds%s}>59)) && additional_time_emsg+=$'\n'"Invalid time $additional_time (more than 59 seconds)"
        [[ $minutes != '' ]] && ((${minutes%s}>59)) \
           && additional_time_emsg+=$'\n'"Invalid time $additional_time (more than 59 minutes)"
        [[ $hours != '' ]] && ((${hours%s}>23)) \
           && additional_time_emsg+=$'\n'"Invalid time $additional_time (more than 23 hours)"
       additional_time_emsg=${additional_time_emsg#$'\n'}
    else
       additional_time_emsg="Invalid time $additional_time (does not match $additional_time_OK_re)"
    fi

    [[ $additional_time_emsg = '' ]] && my_rc=0 || my_rc=1
    fct "${FUNCNAME[0]}" "returning $my_rc"
    return $my_rc
}  # end of function ck_additional_time

source "$BUNG_LIB_DIR/ck_file.fun" || exit 1
source "$BUNG_LIB_DIR/ck_uint.fun" || exit 1

#-----------------------
# Name: convert_additional_time_to_seconds
# Args: none
# Global variables: additional_time read and set
# Purpose: converts additional time to seconds
#--------------------------
function convert_additional_time_to_seconds {
    fct "${FUNCNAME[0]}" 'started'
    local buf days hours seconds

    buf=$additional_time
    seconds=${buf#*m}
    seconds=${seconds%s}
    buf=${buf%"$seconds"s}
    minutes=${buf#*h}
    minutes=${minutes%m}
    buf=${buf%"$minutes"m}
    hours=${buf#*d}
    hours=${hours%h}
    buf=${buf%"$hours"h}
    days=${buf#*d}
    days=${days%d}
    additional_time=seconds
    [[ $minutes != '' ]] && additional_time=$((additional_time+(minutes*60)))
    [[ $hours != '' ]] && additional_time=$((additional_time+(hours*60*60)))
    [[ $days != '' ]] && additional_time=$((additional_time+(days*24*60*60)))

    fct "${FUNCNAME[0]}" 'returning'
}  # end of function convert_additional_time_to_seconds

source "$BUNG_LIB_DIR/err_trap_retention_conf.fun" || exit 1
source "$BUNG_LIB_DIR/err_trap_rsync_conf.fun" || exit 1
source "$BUNG_LIB_DIR/err_trap_uint.fun" || exit 1
source "$BUNG_LIB_DIR/fct.fun" || exit 1

#--------------------------
# Name: finalise
# Purpose: cleans up and exits
# Arguments:
#    $1  exit code
# Exit code:
#   When not terminated by a signal, the sum of zero plus
#      1 when any warnings
#      2 when any errors
#      4 when called by hotplug_bu or super_bu and a subsidiary script was
#        terminated by a signal
#   When terminated by a trapped signal, the sum of 128 plus the signal number
#--------------------------
function finalise {
    fct "${FUNCNAME[0]}" 'started'
    [[ ${bung_compgen_dir:-} != '' ]] && compgen -v >> $bung_compgen_dir/final.vars
    local buf i msg my_exit_code sig_name

    finalising_flag=$true
 
    # Interrupted?
    # ~~~~~~~~~~~~
    my_exit_code=0
    if ck_uint "${1:-}"; then
        if (($1>128)); then    # Trapped interrupt
            interrupt_flag=$true
            i=$((128+${#sig_names[*]}))    # Max valid interrupt code
            if (($1<i)); then
                my_exit_code=$1
                sig_name=${sig_names[$1-128]}
                msg I "Finalising on $sig_name"
                [[ ${summary_fn:-} != '' ]] \
                    && echo "Finalising on $sig_name" >> "$summary_fn"
            else
               msg="${FUNCNAME[0]} called with invalid exit value '${1:-}'"
               msg+=" (> max valid interrupt code $i)"
               msg E "$msg"    # Returns because finalising_flag is set
            fi
        fi
    fi

    # Final log messages and exit return value adjustment
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if [[ $warning_flag ]]; then
        msg I "There was at least one warning"
        ((my_exit_code+=1))
    fi
    if [[ $error_flag ]]; then
        msg I "There was at least one error"
        ((my_exit_code+=2))
    fi
    [[ $interrupt_flag ]] && msg I "There was at least one interrupt"
    msg I "Exiting with return value $my_exit_code"

    # Exit
    # ~~~~
    fct "${FUNCNAME[0]}" "exiting $my_exit_code"
    exit $my_exit_code
}  # end of function finalise

source "$BUNG_LIB_DIR/get_fs_type.fun" || exit 1

#--------------------------
# name: initialise
# purpose:
#   * sets up environment
#   * parses command line
#   * interacts with user to get any missing configuration values
#   * mounts the backup file system (readonly) if not already mounted
#   * creates a temporary directory
# arguments: the command line
# global variables:
#   set:
#       various: as commented in the first few parts below
#       conf_fn: configuration file name
#       last_backup_subdir: the most recent rsync backup subdirectory to
#           restore from
#       restore_dir: directory to restore to
#       snapshot_flag: the configuration file inclides a snapshot keyword
#   read:
# output: none
# return value: 1 when an error is detected, 0 otherwise
#--------------------------
function initialise {
    local args array buf cmd enter_my_own fn msg msg_part list_flag my_dest_dir
    local opt opt_C_flag opt_b_flag opt_r_flag opt_s_flag opt_t_flag
    local regex valid_keywords view_flag
    local additional_time_dd_hh_mm_ss d h m s seconds_flag
    local -r time_days_re='^\+?[[:digit:]]*\.?[[:digit:]]+d$'
    local -r time_hours_re='^\+?[[:digit:]]*\.?[[:digit:]]+h$'
    local -r time_minutes_re='^\+?[[:digit:]]*\.?[[:digit:]]+m$'
    local -r time_seconds_re='^\+?[[:digit:]]*\.?[[:digit:]]+s?$'

    # Configure shell environment
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~
    export PATH=/usr/sbin:/sbin:/usr/bin:/bin
    IFS=$' \n\t'
    set -o nounset
    shopt -s extglob            # Enable extended pattern matching operators
    unset CDPATH                # Ensure cd behaves as expected
    umask 022

    # Initialise some environment variables
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # If these are already set, they are not changed
    export BUNG_ETC_DIR=${BUNG_ETC_DIR:-/etc/bung}

    # Initialise some global logic variables
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    readonly false=
    readonly true=true
 
    debugging_flag=$false
    error_flag=$false
    finalising_flag=$false
    interrupt_flag=$false
    menu_used_flag=$false
    tmp_dir_created_flag=$false
    warning_flag=$false
 
    # Initialise some global string variables
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # The mount and snapshot idx variables aere not used by this script but are required by the parse_conf* functions
    mount_done_mountpoint_idx=-1    
    snapshot_idx=-1    # Not used but required by the parse_conf* functions
    mount_idx=-1    # Not used but required by the parse_conf* functions
    readonly continue_prompt='Enter anything to continue or Ctrl+c to abort'
    readonly msg_date_format='+%H:%M:%S'   # date command format used in messages
    readonly msg_lf=$'\n    '              # message linefeed and indent
    readonly script_name=${0##*/}
    readonly sig_names=(. $(kill -L | sed 's/[[:digit:]]*)//g'))

    # Parse command line
    # ~~~~~~~~~~~~~~~~~~
    args=("$@")
    conf_fn=
    emsg=
    most_recent_rsync_backup_dir_to_include_in_the_restore=
    opt_b_flag=$false
    opt_c_flag=$false
    opt_r_flag=$false
    opt_s_flag=$false
    opt_t_flag=$false
    additional_time=
    restore_dir=
    subdir_of_the_backup_to_restore=
    while getopts :b:c:dhr:s:t:v opt "$@"
    do
        case $opt in
            b )
                most_recent_rsync_backup_dir_to_include_in_the_restore=$OPTARG
                opt_b_flag=$true
                ;;
            c )
                conf_fn=$OPTARG
                opt_c_flag=$true
                ;;
            d )
                debugging_flag=$true
                ;;
            h )
                debugging_flag=$false
                usage verbose
                exit 0
                ;;
            r )
                restore_dir=$OPTARG
                opt_r_flag=$true
                ;;
            s )
                subdir_of_the_backup_to_restore=$OPTARG
                opt_s_flag=$true
                ;;
            t )
                additional_time=$OPTARG
                additional_time_before_conversion=$OPTARG
                opt_t_flag=$true
                ;;
            v )
                echo "$script_name version $script_ver" >&2
                exit 0
                ;;
            : )
                emsg+=$msg_lf"Option $OPTARG must have an argument"
                [[ $OPTARG = c ]] && { opt_c_flag=$true; conf_fn=/bin/bash; }
                ;;
            * )
                emsg+=$msg_lf"Invalid option '-$OPTARG'"
        esac
    done

    # Check option arguments
    # ~~~~~~~~~~~~~~~~~~~~~~
    if [[ $opt_t_flag ]] && ! ck_additional_time "$additional_time"; then
        emsg+=$msg_lf"${additional_time_emsg//$'\n'/$'\n    '}"
    fi

    # Test for mutually exclusive options
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # There are no mutually exclusive options

    # Test for mandatory options not set
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # There are no mandatory options

    # Test for extra arguments
    # ~~~~~~~~~~~~~~~~~~~~~~~~
    shift $(($OPTIND-1))
    if [[ $* != '' ]]; then
        emsg+=$msg_lf"Invalid extra argument(s) '$*'"
    fi

    # Report any errors
    # ~~~~~~~~~~~~~~~~~
    if [[ $emsg != '' ]]; then
        msg E "$emsg"
    fi

    fct initialise 'started (this message deferred until command line parsed)'

    # Ensure effective userid is 0 (root)
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ((EUID!=0)) && msg E "Must be run with effective userid 0 (root)"

    # If the config file not given, ask the user to select
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if [[ ! $opt_c_flag ]]; then
        menu_used_flag=$true
        echo $'\n-c option not used; choosing the rsync_bu config file to base the restore on ...'
        cd "$BUNG_ETC_DIR" || finalise 1
        while IFS= read -r -d '' buf
        do
           grep --ignore-case --quiet '^[[:space:]]*rsync' "$buf" || continue
           array+=("${buf#./}")
        done < <(find -maxdepth 1 -type f -print0)
        [[ ${array:-} = '' ]] && msg E "No rsync_bu config files found in $BUNG_ETC_DIR"
        while true
        do
            echo $'\nChoose the rsync_bu config file to base the restore on'
            echo 'To view the file, prefix its number with v, exmple v4'
            for ((i=0;i<${#array[*]};i++))
            do
                echo "   $i ${array[i]}"
            done
            read -p 'Enter your choice or Ctrl+c to abort: '
            if [[ ${REPLY,,} =~ ^v ]]; then
                view_flag=$true
                index=${REPLY:1}
            else
                view_flag=$false
                index=$REPLY
            fi
            ck_uint "$index"
            if (($?!=0)); then
                echo "Invalid index '$index' (not an unsigned integer)" >&2
                continue
            fi
            if ((index>=${#array[*]})); then
                echo "Invalid index $index (too big)" >&2
                continue
            fi
            if [[ $view_flag ]]; then
                echo
                cat "${array[index]}"
                read -p $'\nPress Enter to continue or Ctrl+c to abort: '
                continue
            fi
            conf_fn="${array[index]}"
            break
        done
        cd - >/dev/null || finalise 1
        show_command_line
    fi
    [[ ! $conf_fn =~ / ]] && conf_fn=$BUNG_ETC_DIR/$conf_fn

    # Ensure there is only one rsync keyword in the configuration file
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if (($(grep --count --ignore-case '^[[:space:]]*rsync' "$conf_fn")>1)); then
        msg E "More than one rsync keyword in '$conf_fn'; not supported"
    fi

    # Parse configuration file
    # ~~~~~~~~~~~~~~~~~~~~~~~~
    # Note: ensure a space on both sides of each string in the arrays
    local -A keyword_validation
    keyword_validation[name]='
        emailforreport 
        logretention 
        mount 
        notificationplug_in 
        organisationname 
        rsync 
        shutdown 
        snapshot 
    '
    keyword_validation[repeat_invalid]=' 
        logretention 
        organisationname 
        rsync 
        shutdown 
    '
    local +r keyword_validation
    rsync_keyword_found_flag=$false
    parse_conf "$conf_fn"
    [[ ! $rsync_keyword_found_flag ]] && emsg+=$msg_lf"Keyword rsync is required"
    [[ $emsg != '' ]] && msg E "Error(s) in configuration file $conf_fn:$emsg"

    # Postprocess and error trap the configuration
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    # rsync
    postprocess_rsync_conf
    err_trap_rsync_conf
    readonly dest_dir
    [[ $emsg != '' ]] && msg E "Error(s) in configuration file $conf_fn:$emsg"

    # If the backup subdirectory not given, ask the user to select
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # The "backup subdirectory" is a subdirectory of rsync's --backup directory
    if [[ ! $opt_b_flag ]]; then
        menu_used_flag=$true
        echo $'\n-b option not used; choosing the backup directory to base the restore on ...'

        # Check the rsync backup directory exists
        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        backup_dir=$dest_dir/$rsync_backup_dir
        backup_dir=${backup_dir//\/*(\/)/\/}    # Change multiple adjacent "/"s to /
        buf=$(ck_file "$backup_dir" d:rx 2>&1)
        [[ $buf != '' ]] && msg E "rsync backup directory: $buf"

        # Get the backup subdirectories' names
        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        unset array
        cd "$backup_dir" || finalise 1
        while IFS= read -r -d '' buf
        do
           array+=("${buf#./}")
        done < <(find -mindepth 3 -maxdepth 3 -type d -print0)
        cd - >/dev/null || finalise 1
        if [[ ${array[0]:-} = '' ]]; then
            msg_part="No backup subdirectories found under '$backup_dir'"
            msg_part+='.  You do not need this script to restore'
            msg_part+=".  You can restore by rsyncing from $my_dest_dir"
            msg I "$msg_part"
            finalise 0
        fi

        # Ask the user to choose the backup subdirectory to restore
        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        while true
        do
            echo
            echo "This script's procedure is:"
            echo '    1. Restore from the last rsync backup.'
            echo "    2. Restore from the rsync backup's backup directories, starting with"
            echo '       the most recent and continuing with successively older ones up to and'
            echo '       including the one chosen now.'
            echo '    3. Delete any restored files which are newer than the time of the'
            echo '       backup named by the user.  In case a snapshot was not used add an'
            echo '       hour to approximate the time it may have taken for the backup to run.'
            echo 'Choose the rsync backup directory for step 2'
            echo
            for ((i=0;i<${#array[*]};i++))
            do
                echo "   $i ${array[i]}"
            done
            read -p 'Enter your choice or Ctrl+c to abort: '
            index=$REPLY
            ck_uint "$index"
            if (($?!=0)); then
                echo "Invalid index '$index' (not an unsigned integer)" >&2
                continue
            fi
            if ((index>=${#array[*]})); then
                echo "Invalid index $index (too big)" >&2
                continue
            fi
            most_recent_rsync_backup_dir_to_include_in_the_restore="${array[index]}"
            break
        done
        show_command_line
    else
        backup_dir=$dest_dir/$rsync_backup_dir
        backup_dir=${backup_dir//\/*(\/)/\/}    # Change multiple adjacent "/"s to /
        buf=$(ck_file "$dest_dir/$rsync_backup_dir/$most_recent_rsync_backup_dir_to_include_in_the_restore" d:rx 2>&1)
        [[ $buf != '' ]] && msg E "-b option $buf"
    fi

    # Check the rsync destination directory exists
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    buf=$(ck_file "$dest_dir" d:rx 2>&1)
    [[ $buf != '' ]] && msg E "Original rsync DEST directory: $buf"

    # Get the directory to restore from
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if [[ ! $opt_s_flag ]]; then
        menu_used_flag=$true
        echo $'\n-s option not used; choosing a subdirectory of the original rsync'"'s DEST argument ..."

        # Interact with user to choose the subdirectory
        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        enter_my_own='Enter my own directory (skip numeric menu)'
        selected_backup_dir=$dest_dir
        while true
        do
            # Build menu
            # ~~~~~~~~~~
            cd "$selected_backup_dir" || finalise 1
            unset array
            array[0]=$enter_my_own
            array[1]=.
            echo $'\nIn this step you choose a directory to restore from.\n'
            echo "You are working with $selected_backup_dir"
            echo "* To enter the path of a $dest_dir sub-directory to restore from, choose 0."
            echo '* To restore from this directory, choose 1.'
            if [[ $selected_backup_dir = $dest_dir ]]; then
                while IFS= read -r -d '' buf
                do
                   array+=("${buf#./}")
                done < <(find -mindepth 1 -maxdepth 1 -type d -name "$rsync_backup_dir" -prune -o -type d -print0)
                n_subdirs=$((${#array[*]}-2))
                min_index_for_l_or_s=2
            else
                array[2]=..
                while IFS= read -r -d '' buf
                do
                   array+=("${buf#./}")
                done < <(find -mindepth 1 -maxdepth 1 -type d -print0)
                n_subdirs=$((${#array[*]}-3))
                min_index_for_l_or_s=3
                echo '* To go back up a directory, choose 2.'
            fi
            cd - >/dev/null || finalise 1
            if ((n_subdirs==0)); then
                msg I "No subdirectories found under '$selected_backup_dir'"
                continue
            fi
            echo '* To list the content of a directory, prefix its number with l, for example l4.'
            echo '* To select from sub-directories of a directory, prefix its number with s, for example s4.'
            echo '* To abort use Ctrl+c'
            echo
            list_flag=$false
            select_flag=$false
            for ((i=0;i<${#array[*]};i++))
            do
                echo "   $i ${array[i]}"
            done

            # Get user input
            # ~~~~~~~~~~~~~~
            read -p 'Enter your choice or Ctrl+c to abort: '
            if [[ ${REPLY^^} =~ ^L ]]; then
                list_flag=$true
                REPLY=${REPLY:1}
            fi
            if [[ ${REPLY^^} =~ ^S ]]; then
                select_flag=$true
                REPLY=${REPLY:1}
            fi
            index=$REPLY
            ck_uint "$index"
            if (($?!=0)); then
                echo "Invalid index '$index' (not an unsigned integer)" >&2
                read -p "$continue_prompt"
                continue
            elif ((index>=${#array[*]})); then
                echo "Invalid index $index (too big)" >&2
                read -p "$continue_prompt"
                continue
            elif [[ $list_flag ]] && ((index<min_index_for_l_or_s)); then
                echo "Cannot list item $index"
                read -p "$continue_prompt"
                continue
            elif [[ $select_flag ]] && ((index<min_index_for_l_or_s)); then
                echo "Cannot select sub-directories of item $index"
                read -p "$continue_prompt"
                continue
            elif ((index==0)); then
                read -p "$dest_dir sub-directory to restore from: " subdir_of_the_backup_to_restore
                if ! ck_file "$dest_dir/$subdir_of_the_backup_to_restore" d:rx; then
                    read -p "$continue_prompt"
                    continue
                fi
            elif ((index==1)); then
                subdir_of_the_backup_to_restore=${selected_backup_dir#$dest_dir}
                break
            elif [[ ${array[2]} = .. ]] && ((index==2)); then
                selected_backup_dir=${selected_backup_dir%/*}
                continue
            elif [[ $list_flag ]]; then
                backup_dir_to_list="$selected_backup_dir/${array[index]}"
                echo "Content of directory $backup_dir_to_list:"
                echo "$(ls -l $backup_dir_to_list)"
                read -p "$continue_prompt"
                continue
            elif [[ $select_flag ]]; then
                selected_backup_dir+=/${array[index]}
                continue
            else
                msg E "Programming error: ${FUNCNAME[0]}: $LINENO: no if-elif matched"
            fi
        done    # Interacting with user to choose backup directory to restore from
        show_command_line
    else    # Option -s used
        buf=$(ck_file "$dest_dir/$subdir_of_the_backup_to_restore" d:rx 2>&1)
        [[ $buf != '' ]] && msg E "$buf"
    fi

    # If the restore directory not given, ask the user to select
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if [[ ! $opt_r_flag ]]; then
        menu_used_flag=$true
        echo $'\n-r option not used; selecting the directory to restore to'

        # Ask the user to choose the restore directory
        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        echo $'\nChoose the directory to restore to'
        enter_my_own='Enter my own restore directory path'
        while true
        do
            restore_dir=$src_dir
            select restore_dir in "$restore_dir" "$enter_my_own"
            do
                ck_uint "$REPLY"
                if (($?!=0)); then
                    echo "Invalid index '$REPLY' (not an unsigned integer)" >&2
                    continue
                fi
                if ((REPLY>2)); then
                    echo "Invalid index $REPLY (too big)" >&2
                    continue
                fi
                if [[ $restore_dir = $enter_my_own ]]; then
                    while true
                    do
                        echo 'Setting restore directory path ...'
                        read -p 'Enter: '
                        restore_dir=$REPLY
                        if [[ ! -d "$restore_dir" ]]; then
                            echo "$restore_dir does not exist.  Create? (Y or N)"
                            read -p 'Enter: '
                            [[ ${REPLY,,} = n ]] && continue
                            mkdir -p "$restore_dir" || continue
                        fi
                        break
                    done
                fi
                break
            done
            break
        done
        show_command_line
    else
        if [[ ! -d "$restore_dir" ]]; then
            echo "$restore_dir does not exist.  Create? (Y or N)"
            read -p 'Enter: '
            [[ ${REPLY,,} = n ]] && finalise 0
            mkdir -p "$restore_dir" || finalise 1
        fi
    fi

    # Get the additional time
    # ~~~~~~~~~~~~~~~~~~~~~~~
    if [[ ! $opt_t_flag ]]; then
        echo $'\n-t option not used; setting the time after the -b timestamp after which new files are deleted'

        while true
        do
            # Ask the user to enter the time
            # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            menu_used_flag=$true
            if [[ $additional_time = '' ]]; then
                read -p 'Enter the time ([[[<days>d]<hours>h]<minutes>m]<seconds>s): ' additional_time
                if ! ck_additional_time "$additional_time"; then
                    echo "$additional_time_emsg"
                    additional_time=
                    continue
                fi
                additional_time_before_conversion=$additional_time
            fi
            convert_additional_time_to_seconds
            break
        done
    else
        convert_additional_time_to_seconds
    fi
    show_command_line

    # Prompt for restore directory confirmation
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # But not if it is empty
    buf=$(find "$restore_dir" -maxdepth 0 -empty 2>&1)
    if [[ $buf = '' ]]; then
        while true
        do
            msg=$'\nRestoring from\n'
            msg+="  $dest_dir/$subdir_of_the_backup_to_restore"$'\n'
            msg+=$'to\n'
            msg+="  $restore_dir"$'\n'
            msg+="Files under $restore_dir may be deleted!!!"$'\n'
            echo "$msg"
            read -p 'OK to continue?  Enter y or n: '
            [[ ${REPLY^^} = N ]] && finalise 0
            [[ ${REPLY^^} = Y ]] && break
        done
    fi

    fct "${FUNCNAME[0]}" 'returning'
}  # end of function initialise

#--------------------------
# Name: msg
# Purpose: generalised messaging interface
# Arguments:
#    $1 class: D, E, I or W indicating Debug, Error, Information or Warning
#    $2 message text
# Global variables read:
#     conf_name
#     script_name
# Output: information messages to stdout; the rest to stderr
# Returns:
#   Does not return (calls finalise) when class is E for error
#   Otherwise returns 0
#--------------------------
function msg {
    local class message_text prefix

    # Process arguments
    # ~~~~~~~~~~~~~~~~~
    class="${1:-}"
    message_text="${2:-}"

    # Class-dependent set-up
    # ~~~~~~~~~~~~~~~~~~~~~~
    case "$class" in
        D )
            [[ ! $debugging_flag ]] && return
            prefix='DEBUG: '
            ;;
        E )
            error_flag=$true
            prefix='ERROR: '
            ;;
        I )
            prefix=
            ;;
        W )
            warning_flag=$true
            prefix='WARN: '
            ;;
        * )
            msg E "msg: programming error: invalid class '$class': '$*'"
    esac

    # Write to stdout or stderr
    # ~~~~~~~~~~~~~~~~~~~~~~~~~
    message_text=$prefix$message_text
    if [[ $class = I ]]; then
        echo "$message_text"
    else
        echo "$message_text" >&2
        if [[ $class = E ]]; then
            [[ ! $finalising_flag ]] && finalise 1
        fi
    fi

    return 0
}  #  end of function msg

source "$BUNG_LIB_DIR/parse_conf.fun" || exit 1
source "$BUNG_LIB_DIR/parse_conf_rsync.fun" || exit 1
source "$BUNG_LIB_DIR/parse_conf_word.fun" || exit 1
source "$BUNG_LIB_DIR/postprocess_org_name_conf.fun" || exit 1
source "$BUNG_LIB_DIR/postprocess_rsync_conf.fun" || exit 1

#--------------------------
# Name: restore
# Purpose: runs rsync
# Arguments: none
# Global variables read
#   * most_recent_rsync_backup_dir_to_include_in_the_restore (as set by -b option or chosen via interactive menu)
#   * restore_dir (as set by -r option or chosen via interactive menu)
# Return code: always 0; does not return on error
#--------------------------
function restore {
    fct "${FUNCNAME[0]}" 'started'
    local array backup_dir buf i last_one_flag msg newer_fn src

    # The procedure is:
    #   1. Restore from the last rsync backup
    #   2. Restore from the rsync backup's backup directories, starting with the most recent and continuing with successively older
    #      ones up to and including the one named by the user
    #   3. Delete any files which are newer than the time of the backup named by the user plus any additional time

    # Restore from the last rsync backup
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    msg I "Restoring from the last rsync_bu backup ..."
    src=$dest_dir/$subdir_of_the_backup_to_restore
    src=${src//\/*(\/)/\/}    # Change multiple adjacent "/"s to /
    if [[ $subdir_of_the_backup_to_restore = '' ]]; then
        rsync -a "$src/" "$restore_dir" --exclude "$rsync_backup_dir"
    else
        rsync -a "$src/" "$restore_dir"
    fi

    # Generate a list of rsync's backup-dirs
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    backup_dir=$dest_dir/$rsync_backup_dir
    backup_dir=${backup_dir//\/*(\/)/\/}    # Change multiple adjacent "/"s to /
    cd "$backup_dir" || finalise 1
    unset array
    while IFS= read -r buf
    do
       array+=("${buf#* ./}")
    done < <( find -mindepth 3 -maxdepth 3 -type d -printf '%Ts %p\n' | sort -n )
    cd - >/dev/null || finalise 1
    [[ ${array[0]:-} = '' ]] \
        && msg E "No backup subdirectories found under '$backup_dir'"

    # Restore from the changed and deleted files trees, newest to wanted
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    last_one_flag=$false
    for ((i=${#array[*]}-1;i>0;i--))
    do
        [[ ${array[i]} = $most_recent_rsync_backup_dir_to_include_in_the_restore ]] && last_one_flag=$true
        backup_subdir=$dest_dir/$rsync_backup_dir/${array[i]}
        src=$backup_subdir/$subdir_of_the_backup_to_restore/
        src=${src//\/*(\/)/\/}    # Change multiple adjacent "/"s to /
        if [[ ! -d "$src" ]]; then
            msg I "No $subdir_of_the_backup_to_restore in $backup_subdir"
            [[ $last_one_flag ]] && break
            continue
        fi
        msg I "Restoring from ${array[i]} ..."
        rsync -a "$src" "$restore_dir"
        [[ $last_one_flag ]] && break
    done

    # Get the epoch time of the backup named by the user
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # The subdir name is YYYY/Mmm/dd@hh:mm, example: 2014/Nov/23@10:15
    # The date command accepts dates like 23 Nov 2014 10:15
    buf=$most_recent_rsync_backup_dir_to_include_in_the_restore
    buf=$(date --date="${buf:9:2} ${buf:5:3} ${buf:0:4} ${buf:12:5}" +%s)
    ck_uint "$buf"
    if (($?!=0)); then
        msg E "Programming error: ${FUNCNAME[0]}, line $LINENO, buf: $buf"
    fi

    # Remove files newer than the time of the backup named by the user
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    msg="Removing files newer than $additional_time_before_conversion"
    msg I "$msg after $most_recent_rsync_backup_dir_to_include_in_the_restore"
    buf=$(date +%s --date="@$buf")
    mtime_of_files_to_delete=$(date +%s --date="@$((buf+additional_time))")
    find "$restore_dir" -type f -newermt "@$mtime_of_files_to_delete" -delete

    fct "${FUNCNAME[0]}" 'returning'
    return
}  # end of function restore

#--------------------------
# Name: show_command_line
# Purpose: prints the command line equivalent of command line options and menu usage
#--------------------------
function show_command_line {
    fct "${FUNCNAME[0]}" 'started'
    local cmd_line

    # Nothing to do?
    # ~~~~~~~~~~~~~~
    if [[ ! $menu_used_flag ]]; then
        fct "${FUNCNAME[0]}" 'returning (nothing to do)'
        return 0
    fi

    # Build the command line to show
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    cmd_line="$script_name"
    [[ $most_recent_rsync_backup_dir_to_include_in_the_restore != '' ]] \
        && cmd_line+=" -b '$most_recent_rsync_backup_dir_to_include_in_the_restore'"
    [[ $conf_fn != '' ]] && cmd_line+=" -c '$conf_fn'"
    [[ $restore_dir != '' ]] && cmd_line+=" -r '$restore_dir'"
    [[ $subdir_of_the_backup_to_restore != '' ]] && cmd_line+=" -s '$subdir_of_the_backup_to_restore'"
    [[ $additional_time != '' ]] && cmd_line+=" -t '$additional_time_before_conversion'"

    # Display the message
    # ~~~~~~~~~~~~~~~~~~~
    echo 'In case you want to abort, the command to run to start over is'
    echo "$cmd_line"

    fct "${FUNCNAME[0]}" 'returning'
}  # end of function show_command_line

#--------------------------
# Name: usage
# Purpose: prints usage message
#--------------------------
function usage {
    fct "${FUNCNAME[0]}" 'started'
    local msg usage

    # Build the messages
    # ~~~~~~~~~~~~~~~~~~
    usage="usage: $script_name "
    usage+='[-b backup_dir] [-c conf] [-d] [-h] [-r restore_dir] [-s subdir] [-t time] [-v]'
    msg='  where:'
    msg+=$'\n    -b names the most recent rsync backup-dir to be included in the restore.'
    msg+=$'\n       backup_dir format is YYYY/Mmm/dd@hh:mm'
    msg+=$'\n       rsync backup-dirs can be viewed on the backup file system under the rsync_bu'
    msg+=$'\n       '"configuration file's DEST directory's backup_dir."
    msg+=$'\n       '"The default backup_dir is '_Changed and deleted files'"
    msg+=$'\n       Default: choose one interactively.'
    msg+=$'\n    -c names the rsync_bu configuration file used for the backups to restore from.'
    msg+=$'\n       If it does not contain a "/", it is relative to the bung configuration directory, normally /etc/bung.'
    msg+=$'\n       Default: choose one interactively.'
    msg+=$'\n    -d turns debugging on.'
    msg+=$'\n    -h prints this help and exits.'
    msg+=$'\n    -r names the directory to restore to.'
    msg+=$'\n       Default: choose one interactively.'
    msg+=$'\n    -s names the subdirectory of the backup to restore.'
    msg+=$'\n       '"It is a subdirectory of the rsync_bu's DEST directory."
    msg+=$'\n       Default: choose one interactively.'
    msg+=$'\n    -t specifies time after the -b timestamp after which new files are deleted.'
    msg+=$'\n       time format is [[[<days>d]<hours>h]<minutes>m]<seconds>s'
    msg+=$'\n       Examples: 0s, 30m0s, 2d12h0m0s'
    msg+=$'\n       If the rsync_bu backup used snapshot(s), should normally be set to 0s.'
    msg+=$'\n       Otherwise should be set to the time taken for the backup to run.'
    msg+=$'\n       Default: set interactively.'
    msg+=$'\n    -v prints the script'"'s version and exits."

    # Display the message(s)
    # ~~~~~~~~~~~~~~~~~~~~~~
    echo "$usage" >&2
    if [[ ${1:-} != 'verbose' ]]; then
        echo "(use -h for help)" >&2
    else
        echo "$msg" >&2
    fi

    fct "${FUNCNAME[0]}" 'returning'
}  # end of function usage

#--------------------------
# Name: main
# Purpose: where it all happens
#--------------------------
[[ ${BUNG_COMPGEN_DIR:-} != '' ]] && compgen -v >> $BUNG_COMPGEN_DIR/initial.vars
initialise "${@:-}"
restore
finalise 0
