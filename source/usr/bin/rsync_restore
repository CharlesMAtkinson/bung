#! /bin/bash

# Copyright (C) 2021 Charles Atkinson
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA

# Purpose: 
#   Restores from rsync backups made by the Backup Next Generation (bung) 
#   suite's rsync_bu script

# Usage: 
#   See usage.fun or use -h option.
    
# Programmers' notes: error and trap handling: 
#   * All errors are fatal and finalise() is called.
#   * At any time, a trapped event may transfer control to finalise().
#   * To allow finalise() to tidy up before exiting, changes that need to be
#     undone are noted with global variables named <change name>_flag and the
#     data required to undo those changes is kept in global variables.
#   * finalise() uses the same functions to undo the changes as are used when
#     they are undone routinely.
#   * $finalising_flag is used to prevent recursive calls when errors are
#     encountered while finalise() is running,

# Programmers' notes: variable names and values
#   * Directory names: *_dir.  Their values should not have a trailing /
#   * File names: *_fn
#   * Logicals: *_flag containing values $true or $false.
#     The $true and $false values allow "if [[ $debugging_flag ]]"
#   * $buf is a localised scratch buffer

# Programmers' notes: file descriptor usage
#   0 (stdin)- not changed
#   1 (stdout)- not changed except when logging request when redirected to log
#   2 (stderr)- not changed except when logging request when redirected to log
#   3 - used for reading the configuration file
#   9 - used for locking the PID file

# Programmers' notes: bash library
#   * May be changed by setting environment variable BUNG_LIB_DIR
export BUNG_LIB_DIR=${BUNG_LIB_DIR:-/usr/lib/bung}
source "$BUNG_LIB_DIR/version.scrippet" || exit 1

# Programmers' notes: function call tree
#    +
#    |
#    +-- initialise
#    |   |
#    |   +-- usage
#    |   |
#    |   +-- parse_conf
#    |   |   |
#    |   |   +-- parse_conf_rsync
#    |   |
#    |   +-- err_trap_uint
#    |   |   |
#    |   |   + ck_uint
#    |   |
#    |   +-- postprocess_mount_conf
#    |   |
#    |   +-- err_trap_mount_conf
#    |   |
#    |   +-- postprocess_rsync_conf
#    |   |
#    |   +-- err_trap_rsync_conf
#    |   |
#    |   +-- err_trap_shutdown
#    |   |
#    |   +-- postprocess_snapshot_conf
#    |   |
#    |   +-- err_trap_snapshot_conf
#    |   |
#    |   +-- do_pid
#    |
#    +-- do_mount
#    |   |
#    |   +-- get_fs_type
#    |   |
#    |   +-- do_mount_command
#    |
#    +-- err_trap_rsync_files_and_dirs
#    |
#    +-- restore
#    |
#    +-- finalise
#
# Utility functions called from various places:
#     ck_file do_umounts fct msg parse_conf_subkey_value parse_conf_word

# Function definitions in alphabetical order.  Execution begins after the last function definition.

#--------------------------
# Name: restore
# Purpose: runs rsync
# Arguments: none
# Return code: always 0; does not return on error
#--------------------------
function restore {
    fct "${FUNCNAME[0]}" 'started'
    local array backup_dir buf i last_one_flag newer_fn

    # The procedure is:
    #   1. Restore from the last rsync backup
    #   2. Restore from the rsync backup's backup directories, starting with
    #      the most recent and continuing with successively older ones up to and
    #      including the one named by the user
    #   3. Delete any restored files which are newer than the time of the
    #      backup named by the user.  In case a snapshot was not used add an
    #      hour to approximate the time it may have taken for the backup to run.

    # Restore from the last rsync backup
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    msg I "Restoring from the last rsync backup ..."
    [[ $subdir = '' ]] && buf= || buf=$subdir/
    dest_dir=$dest_dir/$buf
    dest_dir=${dest_dir//\/*(\/)/\/}    # Change multiple adjacent "/"s to /
    rsync -a "$dest_dir" "$restore_dir" --exclude "${rsync_backup_dir[0]}"

    # Generate a list of rsync's backup subdirectories
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    backup_dir=$dest_dir/$rsync_backup_dir
    backup_dir=${backup_dir//\/*(\/)/\/}    # Change multiple adjacent "/"s to /
    cd "$backup_dir" || finalise 1
    while IFS= read -r -d '' buf
    do
       array+=("${buf#* ./}")
    done < <( find -mindepth 3 -maxdepth 3 -type d -type d -printf '%Ts %p\0' | sort -nr )
    cd - >/dev/null
    [[ ${array[0]:-} = '' ]] \
        && msg E "No backup subdirectories found under '$backup_dir'"

    # Restore from the rsync's backup subdirectories
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    last_one_flag=$false
    #for ((i=0;i<${#array[*]};i++))
    for ((i=${#array[*]}-1;i>0;i--))
    do
        [[ ${array[i]} = $last_backup_subdir ]] && last_one_flag=$true
        backup_subdir=${dest_dirs[0]}/${rsync_backup_dir[0]}/${array[i]}
        backup_subdir=${backup_subdir//\/*(\/)/\/}    # Change multiple adjacent "/"s to /
        msg I "Restoring from ${array[i]} ..."
        rsync -a "$backup_subdir/" "$restore_dir"
        [[ $last_one_flag ]] && break
    done 

    # Get the time of the backup named by the user
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # The subdir name is YYYY/Mmm/dd@hh:mm, example: 2014/Nov/23@10:15
    # The date command accepts dates like 23 Nov 2014 10:15
    buf=$last_backup_subdir
    buf=$(date --date="${buf:9:2} ${buf:5:3} ${buf:0:4} ${buf:12:5}" +%s)
    ck_uint "$buf"
    if (($?!=0)); then
        msg E "Programming error: ${FUNCNAME[0]}, line $LINENO, buf: $buf"
    fi

    # Add some time
    # ~~~~~~~~~~~~~
    # For snapshots, add a minute to allow for no seconds in the name
    # For backups without a snapshot, add an hour to very crudely allow
    # for the backup running time.
    if [[ $snapshot_flag ]]; then
        msg I "Removing files later than $last_backup_subdir ..."
        msg D "Snapshot used; adding a minute to the $last_backup_subdir time"
        ((buf+=60))    # Add a minute
    else
        msg I "Removing files later than $last_backup_subdir plus an hour ..."
        msg D "Snapshot not used; adding an hour to the $last_backup_subdir time"
        ((buf+=3600))    # Add an hour
    fi

    # Remove files newer than the time of the backup named by the user
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # find's -newerXY would be nice; its t option for Y avoids the need for a 
    # file for the timestamps but it is not clear from the man page what the X
    # value means when Y is t.
    newer_fn=$tmp_dir/newer
    touch -t "$(date --date=@$buf +%Y%m%d%H%M)" "$newer_fn" || finalise 1
    msg D "$newer_fn:"$'\n'" $(stat "$newer_fn")"
    find "$restore_dir" -type f -newer "$newer_fn" -delete

    fct "${FUNCNAME[0]}" 'returning'
    return
}  # end of function restore

source "$BUNG_LIB_DIR/ck_file.fun" || exit 1
source "$BUNG_LIB_DIR/ck_uint.fun" || exit 1
source "$BUNG_LIB_DIR/do_mounts.fun" || exit 1
source "$BUNG_LIB_DIR/do_umounts.fun" || exit 1
source "$BUNG_LIB_DIR/err_trap_mount_conf.fun" || exit 1
source "$BUNG_LIB_DIR/err_trap_rsync_conf.fun" || exit 1
source "$BUNG_LIB_DIR/err_trap_rsync_files_and_dirs.fun" || exit 1
source "$BUNG_LIB_DIR/err_trap_shutdown.fun" || exit 1
source "$BUNG_LIB_DIR/err_trap_snapshot_conf.fun" || exit 1
source "$BUNG_LIB_DIR/err_trap_uint.fun" || exit 1
source "$BUNG_LIB_DIR/fct.fun" || exit 1

#--------------------------
# Name: finalise
# Purpose: cleans up and exits
# Arguments:
#    $1  return value
# Return code (on exit): 
#   The sum of zero plus
#      1 if any warnings
#      2 if any errors
#      4,8,16 unused
#      32 if terminated by a signal
#--------------------------
function finalise {
    fct "${FUNCNAME[0]}" 'started'
    [[ ${BUNG_COMPGEN_DIR:-} != '' ]] && compgen -v >> $BUNG_COMPGEN_DIR/final.vars
    local buf my_retval tmp_dir_regex

    finalising_flag=$true
    
    # Interrupted?  Message and exit return value
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    my_retval=0
    case $1 in 
        129 | 130 | 131 | 143 )
            ((my_retval+=32))
            case $1 in
                129 )
                    buf='SIGHUP'
                    ;;
                130 )
                    buf='SIGINT'
                    ;;
                131 )
                    buf='SIGQUIT'
                    ;;
                143 )
                    buf='SIGTERM'
                    ;;
            esac
            msg I "finalising on $buf"
            ;;
    esac

    # Unmount file systems mounted earlier
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    do_umounts

    # Remove temporary directory
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~
    tmp_dir_regex="^/tmp/$script_name\..{6}$"
    [[ $tmp_dir_created_flag \
        && ${tmp_dir:-} =~ $tmp_dir_regex \
    ]] && rm -fr "$tmp_dir"

    # Final log messages and exit return value adjustment
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if [[ $warning_flag ]]; then
        msg I "There was at least one WARNING"
        ((my_retval+=1))
    fi
    if [[ $error_flag ]]; then
        msg I "There was at least one ERROR"
        ((my_retval+=2))
    fi
    [[ $interrupt_flag ]] && msg I "There was at least one interrupt"
    msg I "Exiting with return value $my_retval"

    # Exit
    # ~~~~
    fct "${FUNCNAME[0]}" 'exiting'
    exit $my_retval
}  # end of function finalise

source "$BUNG_LIB_DIR/get_fs_type.fun" || exit 1

#--------------------------
# Name: initialise
# Purpose:
#   * Sets up environment
#   * Parses command line
#   * Interacts with user to get any missing configuration values
#   * Mounts the backup file system (readonly) if not already mounted
#   * Creates a temporary directory
# Arguments: the command line
# Global variables:
#   Set:
#       Various: as commented in the first few parts below
#       conf_fn: configuration file name
#       last_backup_subdir: the most recent rsync backup subdirectory to
#           restore from
#       restore_dir: directory to restore to
#       snapshot_flag: the configuration file inclides a snapshot keyword
#   Read:
# Output: none
# Return value: 1 when an error is detected, 0 otherwise
#--------------------------
function initialise {
    local args array backup_dir buf cmd enter_my_own fn msg msg_part list_flag my_dest_dir
    local opt opt_C_flag opt_b_flag opt_r_flag opt_s_flag
    local regex valid_keywords view_flag

    # Configure shell environment
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~
    export PATH=/usr/sbin:/sbin:/usr/bin:/bin
    IFS=$' \n\t'
    set -o nounset
    shopt -s extglob            # Enable extended pattern matching operators
    unset CDPATH                # Ensure cd behaves as expected
    umask 022
 
    # Initialise some environment variables
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # If these are already set, they are not changed
    export BUNG_BIN_DIR=${BUNG_BIN_DIR:-/usr/bin}
    export BUNG_ETC_DIR=${BUNG_ETC_DIR:-/etc/bung}

    # Initialise some global logic variables
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    readonly false=
    readonly true=true
    
    debugging_flag=$false
    error_flag=$false
    finalising_flag=$false
    interrupt_flag=$false
    tmp_dir_created_flag=$false
    warning_flag=$false
    
    # Initialise some global string variables
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    mount_done_mountpoint_idx=-1
    rsync_idx=-1
    snapshot_idx=-1
    tmp_dir=/tmp
    mount_idx=-1
    readonly msg_date_format='+%H:%M:%S'   # date command format used in messages
    readonly msg_lf=$'\n    '              # message linefeed and indent
    readonly script_name=${0##*/}

    # Parse command line
    # ~~~~~~~~~~~~~~~~~~
    args=("$@")
    conf_fn=
    emsg=
    opt_b_flag=$false
    opt_c_flag=$false
    opt_r_flag=$false
    opt_s_flag=$false
    restore_dir=
    while getopts :b:c:dhr:s:v opt "$@"
    do
        case $opt in
            b )
                last_backup_subdir=$OPTARG
                opt_b_flag=$true
                ;;
            c )
                conf_fn=$OPTARG
                opt_c_flag=$true
                ;;
            d )
                debugging_flag=$true
                ;;
            h )
                debugging_flag=$false
                usage verbose
                exit 0
                ;;
            r )
                restore_dir=$OPTARG
                opt_r_flag=$true
                ;;
            s )
                subdir=$OPTARG
                opt_s_flag=$true
                ;;
            v )
                echo "$script_name version $script_ver" >&2
                exit 0
                ;;
            : )
                emsg+=$msg_lf"Option $OPTARG must have an argument"
                [[ $OPTARG = c ]] && { opt_c_flag=$true; conf_fn=/bin/bash; }
                ;;
            * )
                emsg+=$msg_lf"Invalid option '-$OPTARG'"
        esac
    done

    # Check option arguments
    # ~~~~~~~~~~~~~~~~~~~~~~
    # No checks are possible

    # Test for mutually exclusive options
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # There are no mutually exclusive options

    # Test for mandatory options not set
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # There are no mandatory options

    # Test for extra arguments
    # ~~~~~~~~~~~~~~~~~~~~~~~~
    shift $(($OPTIND-1))
    if [[ $* != '' ]]; then
        emsg+=$msg_lf"Invalid extra argument(s) '$*'"
    fi

    # Report any errors
    # ~~~~~~~~~~~~~~~~~
    if [[ $emsg != '' ]]; then
        msg E "$emsg"
    fi

    fct initialise 'started (this message deferred until command line parsed)'
    
    # Set traps
    # ~~~~~~~~~
    trap 'finalise 129' 'HUP'
    trap 'finalise 130' 'INT'
    trap 'finalise 131' 'QUIT'
    trap 'finalise 143' 'TERM'

    # Ensure effective userid is 0 (root)
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ((EUID!=0)) && msg E "Must be run with effective userid 0 (root)"

    # If the config file not given, ask the user to select
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if [[ ! $opt_c_flag ]]; then
        echo $'\n-c option not used; choosing the rsync_bu config file to base the restore on ...'
        cd "$BUNG_ETC_DIR" || finalise 1
        while IFS= read -r -d '' buf
        do
           grep --ignore-case --quiet '^[[:space:]]*rsync' "$buf" || continue
           array+=("${buf#./}")
        done < <(find -maxdepth 1 -type f -print0)
        [[ ${array:-} = '' ]] && msg E "No rsync_bu config files found in $BUNG_ETC_DIR"
        while true
        do
            echo $'\nChoose the rsync_bu config file to base the restore on'
            echo 'To view the file, prefix its number with v'
            for ((i=0;i<${#array[*]};i++))
            do
                echo "   $i ${array[i]}"
            done
            read -p 'Enter your choice: '
            if [[ ${REPLY,,} =~ ^v ]]; then
                view_flag=$true
                index=${REPLY:1}
            else
                view_flag=$false
                index=$REPLY
            fi
            ck_uint "$index"
            if (($?!=0)); then
                echo "Invalid index '$index' (not an unsigned integer)" >&2
                continue
            fi
            if ((index>=${#array[*]})); then
                echo "Invalid index $index (too big)" >&2
                continue
            fi
            if [[ $view_flag ]]; then
                echo
                cat "${array[index]}"
                read -p $'\nPress Enter to continue: '
                continue
            fi
            conf_fn="${array[index]}"
            break
        done
    fi
    [[ ! $conf_fn =~ / ]] && conf_fn=$BUNG_ETC_DIR/$conf_fn

    # Ensure there is only one rsync keyword in the configuration file
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if (($(grep --count --ignore-case '^[[:space:]]*rsync' "$conf_fn")>1)); then
        msg E "More than one rsync keyword in '$conf_fn'; not supported"
    fi

    # Parse configuration file
    # ~~~~~~~~~~~~~~~~~~~~~~~~
    emsg=
    # Note: ensure a space on both sides of each string in the arrays
    local -A keyword_validation
    keyword_validation[name]=' 
        emailforreport 
        logretention 
        mount 
        organisationname 
        rsync 
        shutdown 
        snapshot 
    '
    keyword_validation[repeat invalid]=' 
        logretention 
        organisationname 
        rsync 
        shutdown 
    '
    local +r keyword_validation
    parse_conf "$conf_fn" 
    [[ $emsg != '' ]] && msg E "Error(s) in configuration file $conf_fn:$emsg"
    # This is a crude test but good enough.  TODO: dependable test?
    grep --ignore-case --quiet '^[[:space:]]*snapshot' "$conf_fn"
    (($?==0)) && snapshot_flag=$true || snapshot_flag=$false

    # Postprocess and error trap the configuration
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Only the values needed for restore

    # Mount
    postprocess_mount_conf
    err_trap_mount_conf

    # rsync
    postprocess_rsync_conf
    err_trap_rsync_conf

    [[ $emsg != '' ]] && msg E "Error(s) in configuration file $conf_fn:$emsg"
 
    # Mount the backup file system if required
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    my_dest_dir=$dest_dir
    for ((j=0;j<=mount_idx;j++))
    do
        fs_file_regex=^${mount_fs_file[j]}
        if [[ $my_dest_dir =~ $fs_file_regex ]]; then
            mount_o_option[j]=readonly
            do_mount $j
            break
        fi
    done

    # If the backup subdirectory not given, ask the user to select
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # The "backup subdirectory" is a subdirectory of rsync's --backup directory
    if [[ ! $opt_b_flag ]]; then
        echo $'\n-b option not used; choosing the backup directory to base the restore on ...'

        # Check the rsync backup directory exists
        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        backup_dir=$dest_dir/$rsync_backup_dir
        backup_dir=${backup_dir//\/*(\/)/\/}    # Change multiple adjacent "/"s to /
        buf=$(ck_file "$backup_dir" d:rx 2>&1)
        [[ $buf != '' ]] && msg E "rsync backup directory: $buf"

        # Get the backup subdirectories' names
        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        unset array
        cd "$backup_dir" || finalise 1
        while IFS= read -r -d '' buf
        do
           array+=("${buf#./}")
        done < <(find -mindepth 3 -maxdepth 3 -type d -print0)
        cd - >/dev/null
        if [[ ${array[0]:-} = '' ]]; then
            msg_part="No backup subdirectories found under '$backup_dir'"
            msg_part+='.  You do not need this script to restore'
            msg_part+=".  You can restore by rsyncing from $my_dest_dir" 
            msg I "$msg_part"
            finalise 0
        fi

        # Ask the user to choose the backup subdirectory to restore
        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
        while true
        do
            echo
            echo "This script's procedure is:"
            echo '    1. Restore from the last rsync backup.'
            echo "    2. Restore from the rsync backup's backup directories, starting with"
            echo '       the most recent and continuing with successively older ones up to and'
            echo '       including the one chosen now.'
            echo '    3. Delete any restored files which are newer than the time of the'
            echo '       backup named by the user.  In case a snapshot was not used add an'
            echo '       hour to approximate the time it may have taken for the backup to run.'
            echo 'Choose the rsync backup directory for step 2'
            echo
            for ((i=0;i<${#array[*]};i++))
            do
                echo "   $i ${array[i]}"
            done
            read -p 'Enter your choice: '
            index=$REPLY
            ck_uint "$index"
            if (($?!=0)); then
                echo "Invalid index '$index' (not an unsigned integer)" >&2
                continue
            fi
            if ((index>=${#array[*]})); then
                echo "Invalid index $index (too big)" >&2
                continue
            fi
            last_backup_subdir="${array[index]}"
            break
        done
    fi

    # Check the rsync destination directory exists
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    buf=$(ck_file "$dest_dir" d:rx 2>&1)
    [[ $buf != '' ]] && msg E "Original rsync DEST directory: $buf"

    # If a subdirectory not given, ask the user to select
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # This subdirectory is a subdirectory of rsync's DEST argument
    if [[ ! $opt_s_flag ]]; then
        echo $'\n-s option not used; choosing a subdirectory of the original rsync'"'s DEST argument ..."

        # Interact with user to choose the subdirectory
        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        enter_my_own='Enter my own directory (skip numeric menu)'
        my_dir=$dest_dir
        while true
        do
            # Build menu
            # ~~~~~~~~~~
            cd "$my_dir" || finalise 1
            unset array
            array[0]=$enter_my_own
            array[1]=.
            while IFS= read -r -d '' buf
            do
               array+=("${buf#./}")
            done < <(find -mindepth 1 -maxdepth 1 -type d -type d -print0)
            cd - >/dev/null
            if [[ ${array[1]} = '' ]]; then
                msg I "No subdirectories found under '$my_dir'"
                continue
            fi

            # Ask the user to choose
            # ~~~~~~~~~~~~~~~~~~~~~~
            while true
            do
                echo
                echo 'In this step you choose a directory to restore.'
                echo
                if [[ $my_dir = $dest_dir ]]; then
                    echo 'Here are the directories from the last rsync backup.'
                    echo '* To enter the path of the directory, choose 0.'
                    echo '* To restore the whole backup, choose 1.'
                fi
                echo '* In case you want to list the content of a directory, prefix'
                echo "  it's number with L, for example L4."
                echo
                list_flag=$false
                for ((i=0;i<${#array[*]};i++))
                do
                    echo "   $i ${array[i]}"
                done
                read -p 'Enter your choice: '
                if [[ ${REPLY^^} =~ ^L ]]; then
                    list_flag=$true
                    REPLY=${REPLY:1}
                fi
                index=$REPLY
                ck_uint "$index"
                if (($?!=0)); then
                    echo "Invalid index '$index' (not an unsigned integer)" >&2
                    continue
                fi
                if ((index>=${#array[*]})); then
                    echo "Invalid index $index (too big)" >&2
                    continue
                fi
                if ((index==0)); then
                    [[ $list_flag ]] && msg I "Ignoring invalid L"
                    while true
                    do
                        echo "Choosing a subdirectory of $dest_dir to restore ..."
                        read -p 'Enter your choice: '
                        buf=$(ck_file "$dest_dir/$REPLY" d:rx 2>&1)
                        [[ $buf = '' ]] && break
                        msg I "$buf"
                    done
                    subdir="$REPLY"
                    break
                fi
                if [[ $list_flag ]]; then
                    my_dir="${array[index]}"
                else
                    subdir="${array[index]}"
                fi
                break
            done
            [[ ! $list_flag ]] && break
        done
    else
        buf=$(ck_file "$dest_dir/$subdir" d:rx 2>&1)
        [[ $buf != '' ]] && msg E "$buf"
    fi

    # If the restore directory not given, ask the user to select
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if [[ ! $opt_r_flag ]]; then
        echo $'\n-r option not used; selecting the directory to restore to'

        # Ask the user to choose the restore directory
        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        echo $'\nChoose the directory to restore to'
        enter_my_own='Enter my own restore directory path'
        while true
        do
            restore_dir=$src_dir
            select restore_dir in "$restore_dir" "$enter_my_own"
            do
                ck_uint "$REPLY"
                if (($?!=0)); then
                    echo "Invalid index '$REPLY' (not an unsigned integer)" >&2
                    continue
                fi
                if ((REPLY>2)); then
                    echo "Invalid index $REPLY (too big)" >&2
                    continue
                fi
                if [[ $restore_dir = $enter_my_own ]]; then
                    while true
                    do
                        echo 'Setting restore directory path ...'
                        read -p 'Enter: '
                        restore_dir=$REPLY
                        if [[ ! -d "$restore_dir" ]]; then
                            echo "$restore_dir does not exist.  Create? (Y or N)"
                            read -p 'Enter: '
                            [[ ${REPLY,,} = n ]] && continue
                            mkdir -p "$restore_dir" || continue
                        fi
                        break
                    done
                fi
                break
            done
            break
        done
    else
        if [[ ! -d "$restore_dir" ]]; then
            echo "$restore_dir does not exist.  Create? (Y or N)"
            read -p 'Enter: '
            [[ ${REPLY,,} = n ]] && finalise 0
            mkdir -p "$restore_dir" || finalise 1
        fi
    fi

    # Prompt for restore directory confirmation
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # But not if it is empty
    buf=$(find "$restore_dir" -maxdepth 0 -empty 2>&1)
    if [[ $buf = '' ]]; then
        while true
        do
            msg=$'\nRestoring from\n'
            msg+="  $dest_dir/$subdir"$'\n'
            msg+=$'to\n'
            msg+="  $restore_dir"$'\n\n'
            msg+="Files under $restore_dir may be deleted!!!"$'\n'
            msg+=$'OK to continue?\n'
            echo "$msg"
            read -p 'Enter (Y or N): '
            [[ ${REPLY^^} = N ]] && finalise 0
            [[ ${REPLY^^} = Y ]] && break
        done
    fi

    # Create temporary directory
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~
    # If the mktemplate is changed, tmp_dir_regex in the finalise function
    # may also need to be changed.
    buf=$(mktemp -d "/tmp/$script_name.XXXXXX" 2>&1)
    if (($?==0)); then 
        tmp_dir=$buf
        tmp_dir_created_flag=$true
        chmod 700 "$tmp_dir"
    else
        msg E "Unable to create temporary directory:$buf"
    fi

    fct "${FUNCNAME[0]}" 'returning'
}  # end of function initialise

#--------------------------
# Name: msg
# Purpose: generalised messaging interface
# Arguments:
#    $1 class: D, E, I or W indicating Debug, Error, Information or Warning
#    $2 message text
# Global variables read:
#     conf_name
#     script_name
# Output: information messages to stdout; the rest to stderr
# Returns: 
#   Does not return (calls finalise) when class is E for error
#   Otherwise returns 0
#--------------------------
function msg {
    local class message_text prefix

    # Process arguments
    # ~~~~~~~~~~~~~~~~~
    class="${1:-}"
    message_text="${2:-}"

    # Class-dependent set-up
    # ~~~~~~~~~~~~~~~~~~~~~~
    case "$class" in  
        D ) 
            [[ ! $debugging_flag ]] && return
            prefix='DEBUG: '
            ;;  
        E ) 
            error_flag=$true
            prefix='ERROR: '
            ;;  
        I ) 
            prefix=
            ;;  
        W ) 
            warning_flag=$true
            prefix='WARN: '
            ;;  
        * ) 
            msg E "msg: programming error: invalid class '$class': '$*'"
    esac

    # Write to stdout or stderr
    # ~~~~~~~~~~~~~~~~~~~~~~~~~
    message_text=$prefix$message_text
    if [[ $class = I ]]; then
        echo "$message_text"
    else
        echo "$message_text" >&2
        if [[ $class = E ]]; then
            [[ ! $finalising_flag ]] && finalise 1 
        fi
    fi  

    return 0
}  #  end of function msg

source "$BUNG_LIB_DIR/my_cat.fun" || exit 1
source "$BUNG_LIB_DIR/parse_conf.fun" || exit 1
source "$BUNG_LIB_DIR/parse_conf_rsync.fun" || exit 1
source "$BUNG_LIB_DIR/parse_conf_word.fun" || exit 1
source "$BUNG_LIB_DIR/postprocess_mount_conf.fun" || exit 1
source "$BUNG_LIB_DIR/postprocess_org_name_conf.fun" || exit 1
source "$BUNG_LIB_DIR/postprocess_rsync_conf.fun" || exit 1

#--------------------------
# Name: usage
# Purpose: prints usage message
#--------------------------
function usage {
    fct "${FUNCNAME[0]}" 'started'
    local msg usage

    # Build the messages
    # ~~~~~~~~~~~~~~~~~~
    usage="usage: $script_name "
    usage+='[-b backup_subdir] [-c conf] [-d] [-h] [-r restore_dir] [-s subdir] [-v]'
    msg='  where:'
    msg+=$'\n    -b most recent rsync backup subdirectory to be included in the restore'
    msg+=$'\n       Default: choose one interactively'
    msg+=$'\n       A YYYY/Mmm/dd@hh:mm subdirectory of the rsync backup directory is required.'
    msg+=$'\n       The default rsync backup directory is '
    msg+="'_Changed and deleted files'"
    msg+=$'\n    -c configuration file name'
    msg+=$'\n    -d debugging on'
    msg+=$'\n    -h prints this help and exits'
    msg+=$'\n    -r directory to restore to.  Default the source directory'
    msg+=$'\n    -s subdirectory of the backup to restore'
    msg+=$'\n       Default: choose one interactively'
    msg+=$'\n    -v prints the script'"'s version and exits"

    # Display the message(s)
    # ~~~~~~~~~~~~~~~~~~~~~~
    echo "$usage" >&2
    if [[ ${1:-} != 'verbose' ]]; then
        echo "(use -h for help)" >&2
    else
        echo "$msg" >&2
    fi

    fct "${FUNCNAME[0]}" 'returning'
}  # end of function usage

#--------------------------
# Name: main
# Purpose: where it all happens
#--------------------------
[[ ${BUNG_COMPGEN_DIR:-} != '' ]] && compgen -v >> $BUNG_COMPGEN_DIR/initial.vars
initialise "${@:-}"
do_mounts
err_trap_rsync_files_and_dirs
restore
finalise 0
